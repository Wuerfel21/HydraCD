
; --------------------------------------------------------
; Delphi OpenGL Texture Sprites
; Version 1.0
; (C) Copyright 2003, Mike Wiering, Wiering Software
; --------------------------------------------------------


; --- GFX unit -------------------------------------------

#file <ProjectName>_gfx.pas
unit <ProjectName>_gfx;

  { Generated by Tile Studio - do not edit! }

interface

  const
    TR = 1;
    TG = 1;
    TB = 1;

  type
    ByteArray = array[0..$FFFE] of Byte;
    ByteArrayPtr = ^ByteArray;

  type
    MapData = 
      record
        MapWidth,
        MapHeight: Integer;
        Map,
        BoundMap: Pointer;
      end;

  type
    TileSetData =
      record
        TileWidth, 
        TileHeight: Integer;
        TileCount: Integer;
;        Tiles: ByteArrayPtr;
        MapCount: Integer;
        Maps: Pointer;
        SequenceCount: Integer;
        Sequences,
        SeqLength: Pointer;
        TexTiles: ByteArrayPtr;
        Surroundings: ByteArrayPtr;
        HEdgeCount,
        VEdgeCount,
        CornerCount: Integer;
        HEdgeTable,
        VEdgeTable,
        CornerTable: Pointer;
        HEdges,
        VEdges,
        Corners: ByteArrayPtr;
        Overlap: Integer;
      end;


#tileset ""

;  procedure <TileSetIdentifier>_Tiles;
  procedure <TileSetIdentifier>_TexTiles;

#map
  const
    <TileSetIdentifier><MapIdentifier>MapData: array [0..<MapHeight> * <MapWidth> - 1] of SmallInt =
#mapdata  "\n      ("  ","  ",\n       "  ",\n       "  ");"
<TileNumber:"%2d">
#end mapdata

  const
    <TileSetIdentifier><MapIdentifier>BoundMapData: array [0..<MapHeight> * <MapWidth> - 1] of Word =
#mapdata  "\n      ("  ","  ",\n       "  ",\n       "  ");"
<BoundMapValue>
#end mapdata

#end map

  const
    <TileSetIdentifier>_Maps: array[0..<MapCount> - 1] of MapData =
    (
#map ","
      (
        MapWidth: <MapWidth>;
        MapHeight: <MapHeight>;
        Map: @<TileSetIdentifier><MapIdentifier>MapData;
        BoundMap: @<TileSetIdentifier><MapIdentifier>BoundMapData;
      )       
#end map
    );


  { tile sequences }
#sequence
  const
    <TileSetIdentifier>Seq<SequenceNumber>: array [0..2 * <SequenceLength>] of SmallInt =
#sequencedata  "\n     ("  ",\n      "  ",\n      -1);"
<TileNumber>, <FrameCount>
#end sequencedata
#end sequence

  const
    <TileSetIdentifier>_Sequences: array[0..<SequenceCount>] of Pointer =
    (
#sequence
      @<TileSetIdentifier>Seq<SequenceNumber>,
#end sequence
      Nil
    );

  const
    <TileSetIdentifier>SeqLength: array[0..<SequenceCount>] of SmallInt =
    (
#sequence
      <SequenceLength>,
#end sequence
      -1
    );

  const
    <TileSetIdentifier>_HEdgeTable: array [0..<2 * HEdgeCount>] of SmallInt = (
#hedge
     <TopTile>, <BottomTile>,
#end hedge
     -1
    );

    <TileSetIdentifier>_VEdgeTable: array [0..<2 * VEdgeCount>] of SmallInt = (
#vedge
     <LeftTile>, <RightTile>,
#end vedge
     -1
    );

    <TileSetIdentifier>_CornerTable: array [0..<4 * CornerCount>] of SmallInt = (
#corner
     <TopLeftTile>, <TopRightTile>, <BottomLeftTile>, <BottomRightTile>,
#end corner
     -1
    );

  const 
    <TileSetIdentifier>_Surroundings: array [0..<TileCount>] of Byte = (
#tile0
     { 0 }
      <1 * OtherTopLeftCorners> + <2 * OtherTopEdges> + <4 * OtherTopRightCorners> + <8 * OtherLeftEdges> +
      <16 * OtherRightEdges> + <32 * OtherBottomLeftCorners> + <64 * OtherBottomEdges> + <128 * OtherBottomRightCorners>,
#end tile0
#tile ","
     { <TileNumber + 1> }
      <1 * OtherTopLeftCorners> + <2 * OtherTopEdges> + <4 * OtherTopRightCorners> + <8 * OtherLeftEdges> +
      <16 * OtherRightEdges> + <32 * OtherBottomLeftCorners> + <64 * OtherBottomEdges> + <128 * OtherBottomRightCorners>
#end tile
    );

  procedure <TileSetIdentifier>_HEdges;
  procedure <TileSetIdentifier>_VEdges;
  procedure <TileSetIdentifier>_Corners;

  const
    tsd_<TileSetIdentifier>: TileSetData = 
      ( TileWidth: <TileWidth>; 
        TileHeight: <TileHeight>;
        TileCount: <TileCount>;
;        Tiles: @<TileSetIdentifier>_Tiles;
        MapCount: <MapCount>;
        Maps: @<TileSetIdentifier>_Maps;
        SequenceCount: <SequenceCount>;
        Sequences: @<TileSetIdentifier>_Sequences;
        SeqLength: @<TileSetIdentifier>SeqLength;
        TexTiles: @<TileSetIdentifier>_TexTiles;
        Surroundings: @<TileSetIdentifier>_Surroundings;
        HEdgeCount: <HEdgeCount>;
        VEdgeCount: <VEdgeCount>;
        CornerCount: <CornerCount>;
        HEdgeTable: @<TileSetIdentifier>_HEdgeTable;
        VEdgeTable: @<TileSetIdentifier>_VEdgeTable;
        CornerTable: @<TileSetIdentifier>_CornerTable;
        HEdges: @<TileSetIdentifier>_HEdges;
        VEdges: @<TileSetIdentifier>_VEdges;
        Corners: @<TileSetIdentifier>_Corners;
        Overlap: <Overlap>;
      );

#end tileset 

implementation


#tileset

;  procedure <TileSetIdentifier>_Tiles; assembler;
;  asm
;#tile ""
;    { tile <TileNumber>: } 
;#tiledata "\n    db "  ","  "\n    db "  "\n    db "  "\n"  " TR,TG,TB"
; <r>,<g>,<b>
;#end tiledata
;
;#end tile
;  end;

  procedure <TileSetIdentifier>_TexTiles; assembler;
  asm
#tile ""
    { tile <TileNumber>: } 
#textiledata "\n    db "  ","  "\n    db "  "\n    db "  "\n"  " TR,TG,TB"
 <r>,<g>,<b>
#end textiledata

#end tile
  end;

  procedure <TileSetIdentifier>_HEdges; assembler;
  asm
#hedge ""
    { horizontal edge <HEdgeNumber>: } 
#hedgedata "\n    db "  ","  "\n    db "  "\n    db "  "\n"  " TR,TG,TB"
 <r>,<g>,<b>
#end hedgedata
#end hedge
  end;

  procedure <TileSetIdentifier>_VEdges; assembler;
  asm
#vedge ""
    { vertical edge <VEdgeNumber>: } 
#vedgedata "\n    db "  ","  "\n    db "  "\n    db "  "\n"  " TR,TG,TB"
 <r>,<g>,<b>
#end vedgedata
#end vedge
  end;

  procedure <TileSetIdentifier>_Corners; assembler;
  asm
#corner ""
    { corner <CornerNumber>: } 
#cornerdata "\n    db "  ","  "\n"  " TR,TG,TB"
 <r>,<g>,<b>
#end cornerdata
#end corner
  end;

#end tileset 
end.

#end file

; --------------------------------------------------------

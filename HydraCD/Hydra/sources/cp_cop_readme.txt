COP Engine Version 1.0 Readme
=============================

Contents:

xgsbmp.cpp - XGSBMP tool source code.
xgsbmp.exe - XGSBMP tool Executeable. (used for converting sprites/maps to .spin)
cp_cop_doit.bat - Batch file that calls xgsbmp to convert the tileset and tilemap to .spin
cp_cop_map_001.txt - 16x32 ASCII tilemap file.
cp_cop_map_001.spin - 16x32 tilemap file in .spin format (generated by XGSBMP)
cp_cop_tiles_002.bmp - 128x128 sample tileset.
cp_cop_tiles_002.spin - 128x128 sample tileset in .spin format (generated by XGSBMP)
cp_cop_test_010.spin - (Top File) COP Test program source code.
cop_drv_010.spin - COP Engine source code.
cp_cop_readme.txt - You're reading it.

The COP engine is nearing it's final release. Anything new will be bugfixes, small improvements, and better documentation.
The engine is good enough to create Vertical scrolling Tilemap games (or you can ditch the tile map by simply scrolling off screen - set cop_pany to -224 or less, this will give increased speed), with upto 32 sprites on the screen of varying sizes.

Basic guide
===========

I would recommend just copying cp_cop_test_010.spin and start from there. But here's what you need if you start from scratch:

--- First these Constants and variables MUST reside in your code, and not be altered/rearranged, unless you alter their equivalents in 'cop_drv_010.spin'.

  obj_n         = 32                ' Number of Objects
  obj_size      = 5                 ' registers per object.
  obj_total_size = obj_n*obj_size   ' Total Number of registers (LONGS)
  OBJ_OFFSET_X  = 0
  OBJ_OFFSET_Y  = 1
  OBJ_OFFSET_W  = 2
  OBJ_OFFSET_H  = 3
  OBJ_OFFSET_I  = 4
  
'///////////////////////////////////////////////////////////////////////
' VARIABLES SECTION ////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////

VAR

long  cop_status
long  cop_control
long  cop_debug
long  cop_phase0
long  cop_monitor0
long  cop_monitor1
long  cop_config
long  cop_vram
long  cop_tile
long  cop_panx
long  cop_pany
long  cop_bgcolor
' |
' |
' LAST
long  cop_obj[obj_total_size]       ' 12 sprite positions



--- Second include this object

  cop   : "cop_drv_010.spin"         ' instantiate a cop object
  tiles : "cp_cop_tiles_002.spin"    ' data object. (128x128 block of random sprites)
  map   : "cp_cop_map_001.spin"      ' data object. (16x32 tile map)

--- third setup and start the cop (NOTE: this will automatically boot 2 cogs)

  ' setup cop engine params.
  ' - sets up cop tile-set (sprite-set) address to tiles.data (your sprite artwork) (stored as RAW bytes $00 is transprancy, $10 is black, the rest are encoded as standard Hydra %CCCCMLLL minus $02. pixel colors are auto-raised +$02 by the COP engine)
  ' - sets tile-set width/height to 128x128 (this is the dimensions of your sprite artwork, Width must be a power of 2, e.g. 2,4,8 16,32,64,128...)
  ' - performs XOR $f0 operation on all non-Zero (non-Transparent) pixels in sprite artwork (this reverses the chroma)
  ' - sets up cop tilemap address to map.data (your map) (stored as 16-bit word offsets to tileset/spriteset data, with base address tiles.data (vram_addr) )
  cop.setup(tiles.data,128,128, $f0, map.data)
  ' start cop engine 
  ' boots 2 cogs, passing a pointer to cop_status (first parameter in cop parameter list) so the cop engine can be controlled properly by the HLL and any other cogs.
  cop.start(@cop_status)

--- fourth sit in a while loop with something like the following.

repeat while TRUE

' /////////////////////////////////////////////////////////////////////////////
' /// MAIN LOOP ///////////////////////////////////////////////////////////////
' /////////////////////////////////////////////////////////////////////////////

  cop.newframe ' clears sprite list

  cop.sprite(128,128, 16, 16, 0, 0) ' adds a sprite at 128,128 of width 16x16 from VRAM source coordinate 0,0

  cop.waitvsync  ' Waits until end of 'Bottom Overscan+vsync+Top Overscan' i.e. releases on first visible scanline

' /////////////////////////////////////////////////////////////////////////////
' /////////////////////////////////////////////////////////////////////////////
' /////////////////////////////////////////////////////////////////////////////





This should be enough to get you going for now.

Colin Phillips - colin.phillips@gmail.com / www.memirsoftware.com